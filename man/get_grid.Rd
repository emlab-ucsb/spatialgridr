% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_grid.R
\name{get_grid}
\alias{get_grid}
\title{Create a spatial grid}
\usage{
get_grid(
  boundary,
  projection_crs,
  option = "raster",
  resolution = 5000,
  sf_method = "centroid"
)
}
\arguments{
\item{boundary}{\code{sf} object with boundary of the area(s) you want a grid for, e.g an EEZ or country. Boundaries can be obtained using \code{get_boundary()}}

\item{projection_crs}{a suitable crs for the area of interest}

\item{option}{the desired output format, either "raster", "sf_square" (vector), or "sf_hex" (vector); default is "raster"}

\item{resolution}{\code{numeric}; the desired grid cell resolution in units (usually metres or degrees) of the projection_crs: \code{sf::st_crs(projection_crs, parameters = TRUE)$units_gdal}}

\item{sf_method}{\code{string}. Only for \code{sf} grids:
\itemize{
\item \code{"centroid"} a cell will be included in the grid if the centroid of the cell falls within the \code{boundary}, or if there is any \code{"overlap"} with the boundary. \code{"overlap"} will be significantly slower.
}}
}
\value{
A \code{terra::rast()} of \code{sf} grid with resolution and crs provided
}
\description{
Creates a spatial grid, in \code{terra::rast()} of \code{sf} format, for areas within the boundaries provided
}
\details{
This function uses \code{sf::st_make_grid()} to create \code{sf} grids. The default ordering of this grid type is from bottom to top, left to right. In contrast, the \code{terra::rast()} grid is ordered from top to bottom, left to right. To preserve consistency across the data types, we have reordered \code{sf} grids to also fill from top to bottom, left to right.
}
\examples{
# use get_boundary() to get a polygon of Samoa's Exclusive Economic Zone
samoa_eez <- get_boundary(name = "Samoa")
# You need a suitable projection for your area of interest, https://projectionwizard.org is useful for this purpose. For spatial planning, equal area projections are normally best.
samoa_projection <- '+proj=laea +lon_0=-172.5 +lat_0=0 +datum=WGS84 +units=m +no_defs'
# Create a grid with 5 km (5000 m) resolution covering the `samoa_eez` in a projection specified by `projection_crs`.
samoa_grid <- get_grid(boundary = samoa_eez, projection_crs = samoa_projection, resolution = 5000)
}
