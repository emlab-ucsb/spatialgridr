% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_data_in_grid.R
\name{get_data_in_grid}
\alias{get_data_in_grid}
\title{Get gridded or cropped data from input data}
\usage{
get_data_in_grid(
  spatial_grid = NULL,
  dat = NULL,
  raw = FALSE,
  meth = NULL,
  name = NULL,
  feature_names = NULL,
  antimeridian = NULL,
  cutoff = 0.5
)
}
\arguments{
\item{spatial_grid}{\code{sf} or \code{terra::rast()} grid created using \code{get_grid()}. Alternatively, if raw data is required, an \code{sf} polygon can be provided, e.g. created using \code{get_boundary()}}

\item{dat}{\code{sf} or \code{terra::rast()} data to be gridded/ cropped. Can also be a path to a file.}

\item{raw}{\code{logical} TRUE returns \code{dat} cropped and masked/ intersected with \code{spatial_grid}. If \code{TRUE}, \code{spatial_grid} should be an \code{sf} polygon.}

\item{meth}{\code{character} method to use for for gridding/ resampling/ reprojecting raster data. If NULL (default), function checks if data values are binary (all 0, 1, NA, or NaN) in which case method is set to "mode" for sf output or "near" for raster output. If data is non-binary, method is set to "average" for sf output or "mean" for raster output. Note that different methods are used for sf and raster as \code{exactextractr::exact_extract()} is used for gridding to sf spatial grid, whereas \code{terra::project()}/\code{terra::resample()} is used for transforming/ gridding raster data.}

\item{name}{\code{character} to name the data output; unless \code{feature_names} is supplied, in which case that column is used as the feature names}

\item{feature_names}{\code{character} (\code{sf} data only) column with feature names that will be used for grouping of input data. If NULL, \code{sf} data is assumed to represent a single features, e.g. one habitat or species.}

\item{antimeridian}{\code{logical} can be set to true if the  \code{spatial_grid} for which data will be extracted crosses the antimeridian and the data source is in lon-lat (EPSG:4326) format. If set to \code{NULL} (default) the function will try to check if the antimeridian is crossed and set this appropriately. Note that if you are using an \code{boundary} or \code{spatial_grid} that crosses the antimeridian and have data that is not in lon-lat}

\item{cutoff}{\code{numeric} for \code{sf} gridded data only, i.e. an \code{sf} \code{spatial_grid} is provided. How much of each grid cell should be covered by an \code{sf} feature for it to be classified as that feature type (cover fraction value between 0 and 1). For example, if \code{cutoff = 0.5} (default), at least half of each grid cell has to be covered by a feature for the cell to be classified as that feature. If \code{NULL}, the \% coverage of each feature in each grid cell is returned.}
}
\value{
\code{sf} or \code{terra::rast()} object; cropped and intersected data in same format as \code{dat} if  an \code{boundary} is provided, otherwise \code{sf} or \code{terra::rast()} gridded data depending on the format of the spatial grid provided
}
\description{
Get gridded or cropped data from input data
}
\examples{
# ridges data for area of Pacific
ridges <- system.file("extdata", "ridges.rds", package = "spatialgridr") |> readRDS()
# use get_boundary() to get Samoa's Exclusive Economic Zone
samoa_eez <- get_boundary(name = "Samoa")

# You need a suitable projection for your area of interest, https://projectionwizard.org is useful for this purpose. If you are doing spatial planning, equal area projections are normally best.
samoa_projection <- '+proj=laea +lon_0=-172.5 +lat_0=0 +datum=WGS84 +units=m +no_defs'

# Create a spatial grid with 5km square cells
samoa_grid <- get_grid(boundary = samoa_eez, resolution = 5000, crs = samoa_projection)
# Get ridges data, which is vector data in sf format, in the spatial grid
ridges_gridded <- get_data_in_grid(spatial_grid = samoa_grid, dat = ridges)
terra::plot(ridges_gridded)

#Get some raster data on cold water corals for the same spatial grid
cold_coral <- system.file("extdata", "cold_coral.tif", package = "spatialgridr") |> terra::rast()
coral_gridded <- get_data_in_grid(spatial_grid = samoa_grid, dat = cold_coral)
terra::plot(coral_gridded)
}
